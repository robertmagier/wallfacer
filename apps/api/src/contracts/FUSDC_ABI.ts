/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IAllowanceTransfer {
  export type PermitDetailsStruct = {
    token: AddressLike;
    amount: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
  };

  export type PermitDetailsStructOutput = [
    token: string,
    amount: bigint,
    expiration: bigint,
    nonce: bigint
  ] & { token: string; amount: bigint; expiration: bigint; nonce: bigint };

  export type PermitSingleStruct = {
    details: IAllowanceTransfer.PermitDetailsStruct;
    spender: AddressLike;
    sigDeadline: BigNumberish;
  };

  export type PermitSingleStructOutput = [
    details: IAllowanceTransfer.PermitDetailsStructOutput,
    spender: string,
    sigDeadline: bigint
  ] & {
    details: IAllowanceTransfer.PermitDetailsStructOutput;
    spender: string;
    sigDeadline: bigint;
  };
}

export interface FUSDC_ABIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "decreaseAllowance"
      | "deposit(uint256,address)"
      | "deposit(uint256,address,uint256)"
      | "depositWithSignature"
      | "depositWithSignatureEIP2612"
      | "getData"
      | "increaseAllowance"
      | "liquidityCallback"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "minDeposit"
      | "mint(uint256,address,uint256)"
      | "mint(uint256,address)"
      | "mintWithSignature"
      | "mintWithSignatureEIP2612"
      | "name"
      | "nonces"
      | "permit"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "rebalance"
      | "redeem(uint256,address,address,uint256)"
      | "redeem(uint256,address,address)"
      | "redeemWithSignature"
      | "rescueFunds"
      | "symbol"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateRates"
      | "updateRebalancer"
      | "updateRewards"
      | "withdraw(uint256,address,address,uint256)"
      | "withdraw(uint256,address,address)"
      | "withdrawWithSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Deposit"
      | "LogRebalance"
      | "LogRescueFunds"
      | "LogUpdateRates"
      | "LogUpdateRebalancer"
      | "LogUpdateRewards"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithSignature",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      IAllowanceTransfer.PermitSingleStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithSignatureEIP2612",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityCallback",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      IAllowanceTransfer.PermitSingleStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSignatureEIP2612",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address,uint256)",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address)",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithSignature",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRebalancer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address,uint256)",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address)",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithSignature",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithSignatureEIP2612",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSignatureEIP2612",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRebalancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithSignature",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRebalanceEvent {
  export type InputTuple = [assets: BigNumberish];
  export type OutputTuple = [assets: bigint];
  export interface OutputObject {
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRescueFundsEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdateRatesEvent {
  export type InputTuple = [
    tokenExchangePrice: BigNumberish,
    liquidityExchangePrice: BigNumberish
  ];
  export type OutputTuple = [
    tokenExchangePrice: bigint,
    liquidityExchangePrice: bigint
  ];
  export interface OutputObject {
    tokenExchangePrice: bigint;
    liquidityExchangePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdateRebalancerEvent {
  export type InputTuple = [rebalancer: AddressLike];
  export type OutputTuple = [rebalancer: string];
  export interface OutputObject {
    rebalancer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdateRewardsEvent {
  export type InputTuple = [rewardsRateModel: AddressLike];
  export type OutputTuple = [rewardsRateModel: string];
  export interface OutputObject {
    rewardsRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FUSDC_ABI extends BaseContract {
  connect(runner?: ContractRunner | null): FUSDC_ABI;
  waitForDeployment(): Promise<this>;

  interface: FUSDC_ABIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  convertToAssets: TypedContractMethod<
    [shares_: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets_: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "deposit(uint256,address)": TypedContractMethod<
    [assets_: BigNumberish, receiver_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  "deposit(uint256,address,uint256)": TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  depositWithSignature: TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish,
      permit_: IAllowanceTransfer.PermitSingleStruct,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  depositWithSignatureEIP2612: TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getData: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: bigint;
        liquidityExchangePrice_: bigint;
        tokenExchangePrice_: bigint;
      }
    ],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  liquidityCallback: TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish, data_: BytesLike],
    [void],
    "nonpayable"
  >;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner_: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner_: AddressLike], [bigint], "view">;

  minDeposit: TypedContractMethod<[], [bigint], "view">;

  "mint(uint256,address,uint256)": TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike, maxAssets_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "mint(uint256,address)": TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mintWithSignature: TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      maxAssets_: BigNumberish,
      permit_: IAllowanceTransfer.PermitSingleStruct,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  mintWithSignatureEIP2612: TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  previewDeposit: TypedContractMethod<
    [assets_: BigNumberish],
    [bigint],
    "view"
  >;

  previewMint: TypedContractMethod<[shares_: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares_: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets_: BigNumberish],
    [bigint],
    "view"
  >;

  rebalance: TypedContractMethod<[], [bigint], "payable">;

  "redeem(uint256,address,address,uint256)": TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      minAmountOut_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  "redeem(uint256,address,address)": TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike, owner_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  redeemWithSignature: TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      minAmountOut_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  rescueFunds: TypedContractMethod<[token_: AddressLike], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateRates: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        tokenExchangePrice_: bigint;
        liquidityExchangePrice_: bigint;
      }
    ],
    "nonpayable"
  >;

  updateRebalancer: TypedContractMethod<
    [newRebalancer_: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRewards: TypedContractMethod<
    [rewardsRateModel_: AddressLike],
    [void],
    "nonpayable"
  >;

  "withdraw(uint256,address,address,uint256)": TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      maxSharesBurn_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  "withdraw(uint256,address,address)": TypedContractMethod<
    [assets_: BigNumberish, receiver_: AddressLike, owner_: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawWithSignature: TypedContractMethod<
    [
      sharesToPermit_: BigNumberish,
      assets_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      maxSharesBurn_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,address)"
  ): TypedContractMethod<
    [assets_: BigNumberish, receiver_: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,address,uint256)"
  ): TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositWithSignature"
  ): TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish,
      permit_: IAllowanceTransfer.PermitSingleStruct,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositWithSignatureEIP2612"
  ): TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      minAmountOut_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity_: string;
        lendingFactory_: string;
        lendingRewardsRateModel_: string;
        permit2_: string;
        rebalancer_: string;
        rewardsActive_: boolean;
        liquidityBalance_: bigint;
        liquidityExchangePrice_: bigint;
        tokenExchangePrice_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidityCallback"
  ): TypedContractMethod<
    [token_: AddressLike, amount_: BigNumberish, data_: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint(uint256,address,uint256)"
  ): TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike, maxAssets_: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(uint256,address)"
  ): TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithSignature"
  ): TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      maxAssets_: BigNumberish,
      permit_: IAllowanceTransfer.PermitSingleStruct,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithSignatureEIP2612"
  ): TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "redeem(uint256,address,address,uint256)"
  ): TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      minAmountOut_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem(uint256,address,address)"
  ): TypedContractMethod<
    [shares_: BigNumberish, receiver_: AddressLike, owner_: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemWithSignature"
  ): TypedContractMethod<
    [
      shares_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      minAmountOut_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rescueFunds"
  ): TypedContractMethod<[token_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRates"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        tokenExchangePrice_: bigint;
        liquidityExchangePrice_: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRebalancer"
  ): TypedContractMethod<[newRebalancer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRewards"
  ): TypedContractMethod<
    [rewardsRateModel_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(uint256,address,address,uint256)"
  ): TypedContractMethod<
    [
      assets_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      maxSharesBurn_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(uint256,address,address)"
  ): TypedContractMethod<
    [assets_: BigNumberish, receiver_: AddressLike, owner_: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawWithSignature"
  ): TypedContractMethod<
    [
      sharesToPermit_: BigNumberish,
      assets_: BigNumberish,
      receiver_: AddressLike,
      owner_: AddressLike,
      maxSharesBurn_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "LogRebalance"
  ): TypedContractEvent<
    LogRebalanceEvent.InputTuple,
    LogRebalanceEvent.OutputTuple,
    LogRebalanceEvent.OutputObject
  >;
  getEvent(
    key: "LogRescueFunds"
  ): TypedContractEvent<
    LogRescueFundsEvent.InputTuple,
    LogRescueFundsEvent.OutputTuple,
    LogRescueFundsEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdateRates"
  ): TypedContractEvent<
    LogUpdateRatesEvent.InputTuple,
    LogUpdateRatesEvent.OutputTuple,
    LogUpdateRatesEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdateRebalancer"
  ): TypedContractEvent<
    LogUpdateRebalancerEvent.InputTuple,
    LogUpdateRebalancerEvent.OutputTuple,
    LogUpdateRebalancerEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdateRewards"
  ): TypedContractEvent<
    LogUpdateRewardsEvent.InputTuple,
    LogUpdateRewardsEvent.OutputTuple,
    LogUpdateRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "LogRebalance(uint256)": TypedContractEvent<
      LogRebalanceEvent.InputTuple,
      LogRebalanceEvent.OutputTuple,
      LogRebalanceEvent.OutputObject
    >;
    LogRebalance: TypedContractEvent<
      LogRebalanceEvent.InputTuple,
      LogRebalanceEvent.OutputTuple,
      LogRebalanceEvent.OutputObject
    >;

    "LogRescueFunds(address)": TypedContractEvent<
      LogRescueFundsEvent.InputTuple,
      LogRescueFundsEvent.OutputTuple,
      LogRescueFundsEvent.OutputObject
    >;
    LogRescueFunds: TypedContractEvent<
      LogRescueFundsEvent.InputTuple,
      LogRescueFundsEvent.OutputTuple,
      LogRescueFundsEvent.OutputObject
    >;

    "LogUpdateRates(uint256,uint256)": TypedContractEvent<
      LogUpdateRatesEvent.InputTuple,
      LogUpdateRatesEvent.OutputTuple,
      LogUpdateRatesEvent.OutputObject
    >;
    LogUpdateRates: TypedContractEvent<
      LogUpdateRatesEvent.InputTuple,
      LogUpdateRatesEvent.OutputTuple,
      LogUpdateRatesEvent.OutputObject
    >;

    "LogUpdateRebalancer(address)": TypedContractEvent<
      LogUpdateRebalancerEvent.InputTuple,
      LogUpdateRebalancerEvent.OutputTuple,
      LogUpdateRebalancerEvent.OutputObject
    >;
    LogUpdateRebalancer: TypedContractEvent<
      LogUpdateRebalancerEvent.InputTuple,
      LogUpdateRebalancerEvent.OutputTuple,
      LogUpdateRebalancerEvent.OutputObject
    >;

    "LogUpdateRewards(address)": TypedContractEvent<
      LogUpdateRewardsEvent.InputTuple,
      LogUpdateRewardsEvent.OutputTuple,
      LogUpdateRewardsEvent.OutputObject
    >;
    LogUpdateRewards: TypedContractEvent<
      LogUpdateRewardsEvent.InputTuple,
      LogUpdateRewardsEvent.OutputTuple,
      LogUpdateRewardsEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
